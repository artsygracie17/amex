{"version":3,"file":"static/webpack/static/development/pages/home.js.3e293eba4b4a2d8a0ebe.hot-update.js","sources":["webpack:///./pages/home.js"],"sourcesContent":["/* First party */\nimport { Component } from 'react'\nimport { Grid, Row, Col } from 'react-styled-flexboxgrid'\nimport styled from 'styled-components'\n\n/* Third party */\nimport data from '../characters.json'\nimport ResultCard from '../components/ResultCard'\n\nconst Container = styled.div`\n    margin: 0 auto;\n`\n\nconst Title = styled.h1`\n    font-size: 2.5rem;\n    margin-bottom: 2rem;\n    text-align: center;\n`\n\nconst Name = styled.p`\n    border-bottom: ${props => props.isCurrentCharacter ? '1px solid black' : 'none'};\n    color: ${props => props.isCurrentCharacter ? 'black' : 'gray'};\n    font-size: 1.2rem;\n    padding-bottom: 0.3em;\n    text-align: center;\n    vertical-align: middle;\n\n    &:hover {\n        color: black;\n        cursor: pointer;\n        border-bottom: 1px solid black;\n    }\n`\n\nconst Theme = styled(Grid)`\n    font-family: 'NeueHaasUnicaPro-Regular';\n    padding: 5rem;\n    padding-top: 1rem;\n`\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            films: [],\n            selectedCharacter: '',\n            status: 'SETTLED'\n        }\n    }\n\n    handleCharacterNameClick = (name, reqUrl) => {\n        this.setState({\n            films: [],\n            selectedCharacter: name,\n            status: 'PENDING'\n        })\n        this.fetchFilms(reqUrl)\n        \n    }\n\n    async fetchFilms (reqUrl) {\n        fetch(reqUrl)\n        .then(res => {\n            console.log(res)\n            if (!res.ok) {\n                throw Error(res.status)\n            } else {\n                return res.json()\n            }\n        })\n        .then(data => {\n            const filmUrls = data.films\n            filmUrls && filmUrls.map(url => {\n                fetch(url)\n                .then(res => res.json())\n                .then(filmData => {\n                    this.setState({\n                        films: [...this.state.films, filmData],\n                        status: 'SETTLED'\n                    })\n                })\n            })\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n    \n    render () {\n        // console.log('data: ', data.characters)\n        const { handleCharacterNameClick } = this\n        const { films, status, selectedCharacter } = this.state\n        return (\n            <Container>\n                <Theme>\n                    <Title> characters and films </Title>\n                    <Row start='xs'>\n                    { data.characters.map((char, i) => {\n                        return (\n                            <Col key={i} xs={12} sm={6} md={3}>\n                                <Name \n                                    isCurrentCharacter={char.name===selectedCharacter}\n                                    onClick={() => handleCharacterNameClick(char.name, char.url)}>\n                                    {char.name} \n                                </Name>    \n                            </Col>\n                        )\n                    })}\n                    </Row>\n                    <Row start='xs'>\n                        <Col xsOffset={1}>\n                        { films && status==='SETTLED' && films.map((film, i) => {\n                            return (\n                                <Row key={i}>\n                                    <Col>\n                                        <ResultCard\n                                            film={film}\n                                        />\n                                    </Col>\n                                </Row>\n                            )\n                        })}\n                        </Col>\n                    </Row>\n                </Theme>\n            </Container>\n        )\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAIA;AAMA;AACA;AAAA;AACA;AAAA;AAaA;AACA;AAKA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AACA;AACA;AAHA;AACA;AAIA;AAEA;AACA;AAhBA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;;;;AAWA;;;;;;;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAMA;;;;AAtFA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}